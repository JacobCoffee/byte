[project]
name = "byte-bot"
version = "0.2.0"
description = "Byte is a bot destined to serve in developer-oriented servers."
authors = [
    { name = "Jacob Coffee", email = "jacob@z7x.org" },
]
dependencies = [
    "python-dotenv>=1.0.0",
    "discord-py>=2.3.2",
    "pydantic>=2.5.2",
    "litestar[jwt,opentelemetry,prometheus,standard,structlog]>=2.4.3",
    "pydantic-settings>=2.1.0",
    "anyio>=4.1.0",
    "advanced-alchemy>=0.6.1",
    "certifi>=2023.11.17",
    "asyncpg>=0.29.0",
    "githubkit[auth-app] @ git+https://github.com/yanyongyu/githubkit.git",
    "PyJWT>=2.8.0",
    "alembic>=1.13.0",
    "pre-commit>=3.6.2",
    "ruff>=0.1.7",
]
requires-python = ">=3.11,<4.0"
#readme = "README.md"
license = { text = "MIT" }
classifiers = [
    'Development Status :: 2 - Pre-Alpha',
    'Programming Language :: Python',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3 :: Only',
    'Programming Language :: Python :: 3.11',
    'Intended Audience :: Developers',
    'Intended Audience :: Information Technology',
    'Intended Audience :: System Administrators',
    'License :: OSI Approved :: MIT License',
    'Operating System :: Unix',
    'Operating System :: POSIX :: Linux',
    'Environment :: Console',
    'Topic :: Software Development :: Libraries :: Python Modules',
    'Topic :: Internet',
]

[project.urls]
Homepage = 'https://docs.byte-bot.app/'
Source = 'https://github.com/JacobCoffee/bytebot'
Documentation = 'https://docs.byte-bot.app'
Changelog = 'https://docs.byte-bot.app/latest/changelog/'
Funding = 'https://github.com/sponsors/JacobCoffee'
Issue = 'https://github.com/JacobCoffee/bytebot/issues/'
Discord = 'https://discord.gg/ZVG8hN6RrJ'
Twitter = 'https://twitter.com/_scriptr'
Reddit = 'https://reddit.com/monorepo'
Youtube = 'https://www.youtube.com/@monorepo'

[project.scripts]
app = "byte_bot.__main__:run_cli"

[project.entry-points."litestar.commands"]
run-bot = "byte_bot.cli:run_bot"
run-web = "byte_bot.cli:run_web"
run-all = "byte_bot.cli:run_all"

[build-system]
requires = ["hatchling", "nodeenv"]
build-backend = "hatchling.build"

[tool.hatch.metadata]
allow-direct-references = true

#[tool.hatch.build]
#dev-mode-dirs = ["byte_bot/", "."]
#include = ["../README.md"]
#packages = ["byte_bot/byte", "byte_bot/server"]
#
#[tool.hatch.build.targets.byte_bot]
#include = [
#  "*"
#]
#
#[tool.hatch.build.targets.sdist]
#include = [
#  "byte_bot",
#  "*.md",
#    "*",
#]

#[tool.pdm.scripts]
#lint = "pre-commit run --all-files"
#test = "pytest"
#docs-serve = "sphinx-autobuild docs docs/_build/ -j auto --watch app --watch docs --watch tests --watch CONTRIBUTING.rst --port 8002"
#changelog = "git cliff -c pyproject.toml -o docs/changelog.rst"
## TODO: Move more from makefile here
#ci = { composite = ["lint", "test"] }

[tool.uv]
dev-dependencies = [
    # - Testing
    "pytest>=7.4.3",
    "coverage>=7.3.2",
    "pytest-benchmark>=4.0.0",
    "pytest-cov>=4.1.0",
    "pytest-dotenv>=0.5.2",
    "pytest-mock>=3.12.0",
    "hypothesis>=6.92.0",
    "pytest-asyncio>=0.23.2",
    # - Documentation
    "sphinx>=7.2.6",
    "sphinx-autobuild>=2021.3.14",
    "sphinx-copybutton>=0.5.2",
    "pydata-sphinx-theme>=0.14.4",
    "sphinx-click>=5.1.0",
    "sphinx-toolbox>=3.5.0",
    "autodoc-pydantic>=2.0.1",
    "shibuya==2023.10.26",
    "sphinxcontrib-mermaid>=0.9.2",
    "sphinx-design>=0.5.0",
    "sphinx-sqlalchemy>=0.2.0",
    # - Linting
    "codespell>=2.2.6",
    "mypy>=1.7.1",
    "pre-commit>=3.6.0",
    "pytailwindcss>=0.2.0",
    "sourcery>=1.14.0",
    "pre-commit>=3.3.3",
    "pyright>=1.1.339",
]

[tool.codespell]
quiet-level = 3
ignore-words-list = "selectin, alog"
skip = "uv.lock, package-lock.json, *.svg, docs/changelog.rst"

[tool.coverage.run]
omit = ["*/tests/*"]

[tool.coverage.report]
exclude_lines = [
    'pragma: no cover',
    'if TYPE_CHECKING:',
    'except ImportError as e:',
    'except ImportError:',
]

[tool.pytest.ini_options]
asyncio_mode = "auto"
filterwarnings = [
    "ignore::DeprecationWarning:pkg_resources.*",
    "ignore::DeprecationWarning:sphinxcontrib",
]

[tool.pyright]
include = ["byte_bot/", "tests"]
disableBytesTypePromotions = true
exclude = [
    "tools",
    "docs",
]
pythonVersion = "3.11"
reportOptionalMemberAccess = false
reportUnknownMemberType = false
reportGeneralTypeIssues = true

[tool.mypy]
namespace_packages = true # discord.Githupy
disallow_any_generics = false
disallow_incomplete_defs = true
disallow_untyped_decorators = false
disallow_untyped_defs = true
disallow_subclassing_any = false
exclude = '''(?x)(
^build/
|^dist/
|^.venv/
|^node_modules/
|^migrations/
)
'''
implicit_reexport = false
plugins = ['pydantic.mypy']
show_error_codes = true
strict = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = ["tests.*"]
disallow_untyped_decorators = false

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = ["sqlalchemy.*", "saq.*", "uvicorn.*", "aiohttp.*", "jsbeautifier", "jsbeautifier.*", "re2.*", "uvloop", "uvloop.*"]

[[tool.mypy.overrides]]
module = ["app.lib.db.migrations.*"]
ignore_errors = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[tool.slotscheck]
strict-imports = false

[tool.ruff]
line-length = 120
src = ["src", "tests"]
target-version = "py311"

[tool.ruff.lint]
select = ["ALL"]
ignore = ["ANN101", "ANN102", "ANN401", "PLR0913", "RUF012", "COM812", "ISC001", "ERA001", "TD", "FIX002"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.mccabe]
max-complexity = 12

[tool.ruff.lint.pep8-naming]
classmethod-decorators = [
    "classmethod",
    "pydantic.validator",
    "pydantic.root_validator",
    "pydantic.field_validator",
    "sqlalchemy.ext.declarative.declared_attr",
    "sqlalchemy.orm.declared_attr.directive",
    "sqlalchemy.orm.declared_attr",
]

[tool.ruff.lint.isort]
known-first-party = ["src", "tests"]

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"**/*.*" = [
    "ANN101",
    "ANN401",
    "ANN102",
    "TD",
    "FIX002",
    "RUF012", # ClassVar Annotations - # TODO: Investigate/Fix
    "FBT001", # Boolean typed positional argument in function definition
    "FBT002", # Boolean default positional argument in function definition
    "FBT003", # Boolean Boolean default positional argument in function definition
    "B008", # Do not perform function calls in argument defaults
]
"byte_bot/**/*.*" = ["PLR0913", "SLF001"]
"byte_bot/server/lib/db/base.py" = ["E501"]
"byte_bot/server/lib/db/migrations/versions/*.*" = ["D", "INP", "PGH"]
"tests/**/*.*" = [
    "S101",
    "D",
    "ARG",
    "PGH",
    "B",
    "FBT",
    "PTH",
    "A",
    "TCH",
    "DTZ",
    "TRY",
    "EM",
    "S",
    "N",
    "SIM",
    "PLR",
    "BLE",
    "RSE",
    "C901",
    "PLW",
    "G",
    "PIE",
    "RUF012",
    "FA",
    "ANN",
    "SLF",
    "PT",
    "INP",
    "TD",
    "FIX",
    "FBT",
    "PLR0913", # too many arguments
    "PT",
    "PLR2004",
    "TID252",
    "T",
]
"docs/**/*.*" = [
    "S",
    "B",
    "DTZ",
    "A",
    "TCH",
    "ERA",
    "D",
    "RET",
    "E731",
    "RUF012",
    "FA100",
    "ARG001",
]
"docs/conf.py" = ["FIX002", "ARG001", "INP001"]
"tools/**/*.*" = ["D", "ARG", "EM", "TRY", "G", "FBT", "INP"]

[tool.git-cliff.changelog]
header = """
=========
Changelog
=========\n
All commits to this project will be documented in this file.\n
"""
body = """
{% if version %}\
    `Release [v{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }} <https://github.com/JacobCoffee/byte/releases/tag/v{{ version | trim_start_matches(pat="v") }}>`_
    ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    * `See All commits in v{{ version | trim_start_matches(pat="v") }} <https://github.com/JacobCoffee/byte/commits/v{{ version | trim_start_matches(pat="v") }}>`_
{% else %}\
    [unreleased]
    ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
{% endif %}\
{% if version and previous %}\
    {% if previous.commit_id %}
        `{{ previous.commit_id | truncate(length=7, end="") }} <https://github.com/JacobCoffee/byte/commit/{{ previous.commit_id }}>`_ ... \
        `{{ commit_id | truncate(length=7, end="") }} <https://github.com/JacobCoffee/byte/commit/{{ commit_id }}>`_ \
        | `See diff for {{ version }} <https://github.com/JacobCoffee/byte/compare/{{ previous.commit_id }}...{{ commit_id }}>`_
    {% endif %}\
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    {{ group | upper_first }}
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {% for commit in commits %}
        * (`{{ commit.id | truncate(length=7, end="") }} <https://github.com/JacobCoffee/byte/commit/{{ commit.id }}>`_) {% if commit.breaking %}[**breaking**] {% endif %} - {{ commit.message | upper_first }} ({{ commit.author.name }})\
          {% for footer in commit.footers -%}
            , {{ footer.token }}{{ footer.separator }}{{ footer.value }}\
          {% endfor %}\
    {% endfor %}
{% endfor %}\n
"""
trim = true
footer = """
Byte Bot Changelog
"""
#postprocessors = [{ pattern = "`", replace = "``" }]

[tool.git-cliff.git]
conventional_commits = true
filter_unconventional = true
split_commits = false
commit_parsers = [
    { message = "^feat", group = "Features" },
    { message = "^fix", group = "Bug Fixes" },
    { message = "^doc", group = "Documentation" },
    { message = "^perf", group = "Performance" },
    { message = "^refactor", group = "Refactor" },
    { message = "^style", group = "Styling" },
    { message = "^test", group = "Testing" },
    { message = "^chore\\(release\\): prepare for", skip = true },
    { message = "^chore", group = "Miscellaneous Tasks" },
    { body = ".*security", group = "Security" },
]
commit_preprocessors = [
    # Matches a single backtick that is not preceded by another backtick (negative lookbehind)
    # and not followed by another backtick (negative lookahead).. but these aren't supported
    # in git cliff regexes. So we have to do it in 3 steps:
    # Step 1: Replace pairs of backticks with a placeholder (e.g., "DOUBLEBACKTICK")
    { pattern = "``", replace = "DOUBLEBACKTICK" },
    # Step 2: Replace single backticks with double backticks
    { pattern = "`", replace = "``" },
    # Step 3: Replace the placeholder back to double backticks
    { pattern = "DOUBLEBACKTICK", replace = "``" },
    # TODO: Fix Co-authored commits
]
protect_breaking_commits = false
filter_commits = false
tag_pattern = "v[0-9]*"
skip_tags = "v0.1.0-beta.1"
ignore_tags = ""
topo_order = false
sort_commits = "oldest"
link_parsers = [
    # TODO: Supposedly matches on #1234 but doesn't work?
    { pattern = "\\(#(\\d+)\\)", href = "https://github.com/JacobCoffee/byte/issues/$1" },
]
