# type: ignore
"""

Revision ID: f32ee278015d
Revises: 73a26ceab2c4
Create Date: 2024-03-11 05:17:53.372688+00:00

"""

from __future__ import annotations

import warnings

import sqlalchemy as sa
from advanced_alchemy.types import GUID, ORA_JSONB, DateTimeUTC
from alembic import op
from sqlalchemy import Text  # noqa: F401

__all__ = ["data_downgrades", "data_upgrades", "downgrade", "schema_downgrades", "schema_upgrades", "upgrade"]

sa.GUID = GUID
sa.DateTimeUTC = DateTimeUTC
sa.ORA_JSONB = ORA_JSONB

# revision identifiers, used by Alembic.
revision = "f32ee278015d"
down_revision = "73a26ceab2c4"
branch_labels = None
depends_on = None


def upgrade() -> None:
    with warnings.catch_warnings():
        warnings.filterwarnings("ignore", category=UserWarning)
        with op.get_context().autocommit_block():
            schema_upgrades()
            data_upgrades()


def downgrade() -> None:
    with warnings.catch_warnings():
        warnings.filterwarnings("ignore", category=UserWarning)
        with op.get_context().autocommit_block():
            data_downgrades()
            schema_downgrades()


def schema_upgrades() -> None:
    """schema upgrade migrations go here."""
    from sqlalchemy import inspect

    inspector = inspect(op.get_bind())
    if "forum_config" in inspector.get_table_names():
        op.drop_table("forum_config")
    if "github_config" in inspector.get_table_names():
        op.drop_table("github_config")
    if "so_tags" in inspector.get_table_names():
        op.drop_table("so_tags")

    # Recreate sub-tables with original schema
    op.create_table(
        "forum_config",
        sa.Column("id", sa.BigInteger(), autoincrement=True, nullable=False),
        sa.Column("guild_id", sa.BigInteger(), nullable=False),
        sa.ForeignKeyConstraint(["guild_id"], ["guild.guild_id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )

    op.create_table(
        "github_config",
        sa.Column("id", sa.BigInteger(), autoincrement=True, nullable=False),
        sa.Column("guild_id", sa.BigInteger(), nullable=False),
        sa.ForeignKeyConstraint(["guild_id"], ["guild.guild_id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )

    op.create_table(
        "so_tags_config",
        sa.Column("id", sa.BigInteger(), autoincrement=True, nullable=False),
        sa.Column("guild_id", sa.BigInteger(), nullable=False),
        sa.ForeignKeyConstraint(["guild_id"], ["guild.guild_id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )

    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("forum_config", schema=None) as batch_op:
        batch_op.add_column(sa.Column("help_forum", sa.Boolean(), nullable=False))
        batch_op.add_column(sa.Column("help_forum_category", sa.String(), nullable=True))
        batch_op.add_column(sa.Column("help_thread_auto_close", sa.Boolean(), nullable=False))
        batch_op.add_column(sa.Column("help_thread_auto_close_days", sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column("help_thread_notify", sa.Boolean(), nullable=False))
        batch_op.add_column(sa.Column("help_thread_notify_roles", sa.String(), nullable=True))
        batch_op.add_column(sa.Column("help_thread_notify_days", sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column("showcase_forum", sa.Boolean(), nullable=False))
        batch_op.add_column(sa.Column("showcase_forum_category", sa.String(), nullable=True))
        batch_op.add_column(sa.Column("showcase_thread_auto_close", sa.Boolean(), nullable=False))
        batch_op.add_column(sa.Column("showcase_thread_auto_close_days", sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column("sa_orm_sentinel", sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column("created_at", sa.DateTimeUTC(timezone=True), nullable=False))
        batch_op.add_column(sa.Column("updated_at", sa.DateTimeUTC(timezone=True), nullable=False))
        batch_op.drop_constraint("fk_forum_config_guild_id_guild", type_="foreignkey")
        batch_op.create_foreign_key(
            batch_op.f("fk_forum_config_guild_id_guild"), "guild", ["guild_id"], ["guild_id"], ondelete="cascade"
        )
        batch_op.create_table_comment("Forum configuration for a guild.", existing_comment=None)

    with op.batch_alter_table("github_config", schema=None) as batch_op:
        batch_op.add_column(sa.Column("discussion_sync", sa.Boolean(), nullable=False))
        batch_op.add_column(sa.Column("github_organization", sa.String(), nullable=True))
        batch_op.add_column(sa.Column("github_repository", sa.String(), nullable=True))
        batch_op.add_column(sa.Column("sa_orm_sentinel", sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column("created_at", sa.DateTimeUTC(timezone=True), nullable=False))
        batch_op.add_column(sa.Column("updated_at", sa.DateTimeUTC(timezone=True), nullable=False))
        batch_op.drop_constraint("fk_github_config_guild_id_guild", type_="foreignkey")
        batch_op.create_foreign_key(
            batch_op.f("fk_github_config_guild_id_guild"), "guild", ["guild_id"], ["guild_id"], ondelete="cascade"
        )
        batch_op.create_table_comment("GitHub configuration for a guild.", existing_comment=None)

    with op.batch_alter_table("so_tags_config", schema=None) as batch_op:
        batch_op.add_column(sa.Column("tag_name", sa.String(length=50), nullable=False))
        batch_op.add_column(sa.Column("sa_orm_sentinel", sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column("created_at", sa.DateTimeUTC(timezone=True), nullable=False))
        batch_op.add_column(sa.Column("updated_at", sa.DateTimeUTC(timezone=True), nullable=False))
        batch_op.create_unique_constraint(batch_op.f("uq_so_tags_config_guild_id"), ["guild_id", "tag_name"])
        batch_op.drop_constraint("fk_so_tags_config_guild_id_guild", type_="foreignkey")
        batch_op.create_foreign_key(
            batch_op.f("fk_so_tags_config_guild_id_guild"), "guild", ["guild_id"], ["guild_id"], ondelete="cascade"
        )
        batch_op.create_table_comment("Configuration for a Discord guild's Stack Overflow tags.", existing_comment=None)

    # ### end Alembic commands ###


def schema_downgrades() -> None:
    """if we have to downgrade we're fucked."""
    from sqlalchemy import inspect

    inspector = inspect(op.get_bind())
    if "forum_config" in inspector.get_table_names():
        op.drop_table("forum_config")
    if "github_config" in inspector.get_table_names():
        op.drop_table("github_config")
    if "so_tags_config" in inspector.get_table_names():
        op.drop_table("so_tags_config")

    # Recreate sub-tables with original schema
    op.create_table(
        "forum_config",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("guild_id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(["guild_id"], ["guild.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )

    op.create_table(
        "github_config",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("guild_id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(["guild_id"], ["guild.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )

    op.create_table(
        "so_tags",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("guild_id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(["guild_id"], ["guild.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )


def data_upgrades() -> None:
    """Add any optional data upgrade migrations here!"""


def data_downgrades() -> None:
    """Add any optional data downgrade migrations here!"""
