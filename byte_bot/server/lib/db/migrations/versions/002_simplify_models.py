# type: ignore
"""

Revision ID: feebdacfdd91
Revises: 43165a559e89
Create Date: 2023-12-18 03:20:32.171148+00:00

"""

from __future__ import annotations

import warnings

import sqlalchemy as sa
from advanced_alchemy.types import GUID, ORA_JSONB, DateTimeUTC
from alembic import op
from sqlalchemy import Text  # noqa: F401
from sqlalchemy.dialects import postgresql

__all__ = ["downgrade", "upgrade", "schema_upgrades", "schema_downgrades", "data_upgrades", "data_downgrades"]

sa.GUID = GUID
sa.DateTimeUTC = DateTimeUTC
sa.ORA_JSONB = ORA_JSONB

# revision identifiers, used by Alembic.
revision = "feebdacfdd91"
down_revision = "43165a559e89"
branch_labels = None
depends_on = None


def upgrade() -> None:
    with warnings.catch_warnings():
        warnings.filterwarnings("ignore", category=UserWarning)
        with op.get_context().autocommit_block():
            schema_upgrades()
            data_upgrades()


def downgrade() -> None:
    with warnings.catch_warnings():
        warnings.filterwarnings("ignore", category=UserWarning)
        with op.get_context().autocommit_block():
            data_downgrades()
            schema_downgrades()


def schema_upgrades() -> None:
    """schema upgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "guild",
        sa.Column("id", sa.GUID(length=16), nullable=False),
        sa.Column("guild_id", sa.BigInteger(), nullable=False),
        sa.Column("guild_name", sa.String(length=100), nullable=False),
        sa.Column("prefix", sa.String(length=5), server_default="!", nullable=False),
        sa.Column("help_channel_id", sa.BigInteger(), nullable=True),
        sa.Column("sync_label", sa.String(), nullable=True),
        sa.Column("issue_linking", sa.Boolean(), nullable=False),
        sa.Column("comment_linking", sa.Boolean(), nullable=False),
        sa.Column("pep_linking", sa.Boolean(), nullable=False),
        sa.Column("sa_orm_sentinel", sa.Integer(), nullable=True),
        sa.Column("created_at", sa.DateTimeUTC(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTimeUTC(timezone=True), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_guild")),
    )
    with op.batch_alter_table("guild", schema=None) as batch_op:
        batch_op.create_index(batch_op.f("ix_guild_guild_id"), ["guild_id"], unique=True)

    op.create_table(
        "allowed_users",
        sa.Column("id", sa.GUID(length=16), nullable=False),
        sa.Column("guild_id", sa.BigInteger(), nullable=False),
        sa.Column("user_id", sa.GUID(length=16), nullable=False),
        sa.Column("sa_orm_sentinel", sa.Integer(), nullable=True),
        sa.Column("created_at", sa.DateTimeUTC(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTimeUTC(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["guild_id"], ["guild.guild_id"], name=op.f("fk_allowed_users_guild_id_guild"), ondelete="cascade"
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["user.id"], name=op.f("fk_allowed_users_user_id_user"), ondelete="cascade"
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_allowed_users")),
        sa.UniqueConstraint("guild_id", "user_id", name=op.f("uq_allowed_users_guild_id")),
    )
    op.create_table(
        "so_tags",
        sa.Column("id", sa.GUID(length=16), nullable=False),
        sa.Column("guild_id", sa.GUID(length=16), nullable=False),
        sa.Column("tag_name", sa.String(length=50), nullable=False),
        sa.Column("sa_orm_sentinel", sa.Integer(), nullable=True),
        sa.Column("created_at", sa.DateTimeUTC(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTimeUTC(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(["guild_id"], ["guild.id"], name=op.f("fk_so_tags_guild_id_guild"), ondelete="cascade"),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_so_tags")),
        sa.UniqueConstraint("guild_id", "tag_name", name=op.f("uq_so_tags_guild_id")),
    )
    op.drop_table("guild_sotags_config")
    op.drop_table("guild_github_config")
    op.drop_table("guild_allowed_users_config")
    op.drop_table("sotag_config")
    op.drop_table("guild_config")
    with op.batch_alter_table("github_config", schema=None) as batch_op:
        batch_op.add_column(sa.Column("guild_id", sa.GUID(length=16), nullable=False))
        batch_op.create_foreign_key(
            batch_op.f("fk_github_config_guild_id_guild"), "guild", ["guild_id"], ["id"], ondelete="cascade"
        )
        batch_op.create_table_comment("GitHub configuration for a guild.", existing_comment=None)

    with op.batch_alter_table("user", schema=None) as batch_op:
        batch_op.create_table_comment("A user.", existing_comment=None)

    # ### end Alembic commands ###


def schema_downgrades() -> None:
    """schema downgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("user", schema=None) as batch_op:
        batch_op.drop_table_comment(existing_comment="A user.")

    with op.batch_alter_table("github_config", schema=None) as batch_op:
        batch_op.drop_table_comment(existing_comment="GitHub configuration for a guild.")
        batch_op.drop_constraint(batch_op.f("fk_github_config_guild_id_guild"), type_="foreignkey")
        batch_op.drop_column("guild_id")

    op.create_table(
        "sotag_config",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("tag_name", sa.VARCHAR(length=50), autoincrement=False, nullable=False),
        sa.Column("sa_orm_sentinel", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint("id", name="pk_sotag_config"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "guild_allowed_users_config",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("guild_id", sa.BIGINT(), autoincrement=False, nullable=False),
        sa.Column("user_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("sa_orm_sentinel", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("created_at", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
        sa.Column("updated_at", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["guild_id"],
            ["guild_config.guild_id"],
            name="fk_guild_allowed_users_config_guild_id_guild_config",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["user.id"], name="fk_guild_allowed_users_config_user_id_user", ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id", name="pk_guild_allowed_users_config"),
        sa.UniqueConstraint("guild_id", "user_id", name="uq_guild_allowed_users_config_guild_id"),
    )
    op.create_table(
        "guild_config",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("guild_id", sa.BIGINT(), autoincrement=False, nullable=False),
        sa.Column("guild_name", sa.VARCHAR(length=100), autoincrement=False, nullable=False),
        sa.Column(
            "prefix",
            sa.VARCHAR(length=5),
            server_default=sa.text("'!'::character varying"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("help_channel_id", sa.BIGINT(), autoincrement=False, nullable=False),
        sa.Column("sync_label", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("issue_linking", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column("comment_linking", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column("pep_linking", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column("sa_orm_sentinel", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("created_at", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
        sa.Column("updated_at", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint("id", name="pk_guild_config"),
        postgresql_ignore_search_path=False,
    )
    with op.batch_alter_table("guild_config", schema=None) as batch_op:
        batch_op.create_index("ix_guild_config_help_channel_id", ["help_channel_id"], unique=False)
        batch_op.create_index("ix_guild_config_guild_id", ["guild_id"], unique=False)

    op.create_table(
        "guild_github_config",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("guild_id", sa.BIGINT(), autoincrement=False, nullable=False),
        sa.Column("github_config_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("sa_orm_sentinel", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("created_at", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
        sa.Column("updated_at", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["github_config_id"],
            ["github_config.id"],
            name="fk_guild_github_config_github_config_id_github_config",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["guild_id"],
            ["guild_config.guild_id"],
            name="fk_guild_github_config_guild_id_guild_config",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name="pk_guild_github_config"),
        sa.UniqueConstraint("guild_id", "github_config_id", name="uq_guild_github_config_guild_id"),
    )
    op.create_table(
        "guild_sotags_config",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("guild_id", sa.BIGINT(), autoincrement=False, nullable=False),
        sa.Column("sotag_config_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("sa_orm_sentinel", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("created_at", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
        sa.Column("updated_at", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["guild_id"],
            ["guild_config.guild_id"],
            name="fk_guild_sotags_config_guild_id_guild_config",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["sotag_config_id"],
            ["sotag_config.id"],
            name="fk_guild_sotags_config_sotag_config_id_sotag_config",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name="pk_guild_sotags_config"),
        sa.UniqueConstraint("guild_id", "sotag_config_id", name="uq_guild_sotags_config_guild_id"),
    )
    op.drop_table("so_tags")
    op.drop_table("allowed_users")
    with op.batch_alter_table("guild", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_guild_guild_id"))

    op.drop_table("guild")
    # ### end Alembic commands ###


def data_upgrades() -> None:
    """Add any optional data upgrade migrations here!"""


def data_downgrades() -> None:
    """Add any optional data downgrade migrations here!"""
